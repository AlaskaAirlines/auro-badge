import { css, LitElement } from 'lit';
import { html } from 'lit/static-html.js';
import AuroLibraryRuntimeUtils from '@aurodesignsystem/auro-library/scripts/utils/runtimeUtils.mjs';
import { AuroDependencyVersioning } from '@aurodesignsystem/auro-library/scripts/runtime/dependencyTagVersioning.mjs';
import { AuroButton } from '@aurodesignsystem/auro-button/src/auro-button.js';
import { AuroIcon } from '@aurodesignsystem/auro-icon/src/auro-icon.js';
import closeIcon from '@alaskaairux/icons/dist/icons/interface/x-sm.mjs';

var styleCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}:host(.focus-visible).target::-moz-focus-inner,:focus-visible.target::-moz-focus-inner{width:100%}:host{line-height:1;--labelpillpadding: .3125rem}:host([space]){margin-left:var(--ds-size-300, 1.5rem)}:host{display:inline-flex;align-items:center;justify-content:center;white-space:nowrap;border-style:solid;border-width:1px;border-radius:1.375rem;padding:.688rem var(--ds-size-200, 1rem)}:host([target]){padding:0;border:0}:host([target][ondark][disabled]) .target{color:var(--ds-color-text-primary-default, #2a2a2a)}.target{font:inherit;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;-webkit-user-select:none}[auro-icon]{--ds-auro-icon-size: var(--ds-size-300, $ds-size-300)}::part(button){padding-left:calc(var(--ds-size-150, 0.75rem) + var(--ds-size-, 0.125rem));padding-right:var(--ds-size-100, 0.5rem)}:host([label]){font-size:var(--ds-text-body-size-xs, 0.75rem);padding:var(--labelpillpadding) var(--ds-size-150, 0.75rem);user-select:none;border-radius:9999px}:host([pill]){padding:var(--labelpillpadding) var(--ds-size-150, 0.75rem);user-select:none;border-radius:9999px}:host([disabled]){opacity:.4}:host([icon]){padding:var(--labelpillpadding) var(--ds-size-200, 1rem)}:host([icon]) ::slotted(auro-icon){width:var(--ds-size-300, 1.5rem);margin-right:var(--ds-size-50, 0.25rem)}:host([icon][pill]) ::slotted(auro-icon){width:var(--ds-size-200, 1rem)}:host([icon][pill]){padding:var(--ds-size-50, 0.25rem) var(--ds-size-150, 0.75rem);line-height:.75rem}:host([icon]){padding:var(--labelpillpadding) var(--ds-size-200, 1rem)}:host([icon]) ::slotted(auro-icon){width:var(--ds-size-300, 1.5rem);margin-right:var(--ds-size-50, 0.25rem)}:host([icon][pill]) ::slotted(auro-icon){width:var(--ds-size-200, 1rem)}:host([icon][pill]){padding:var(--ds-size-50, 0.25rem) var(--ds-size-150, 0.75rem);line-height:.75rem}`;

var colorCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}:host(.focus-visible).target,:focus-visible.target{box-shadow:inset 0 0 0 1px var(--ds-auro-badge-boxshadow-color),inset 0 0 0 3px var(--ds-auro-badge-boxshadow-color)}:host(.focus-visible).target::-moz-focus-inner,:focus-visible.target::-moz-focus-inner{border:none}:host{color:var(--ds-auro-badge-text-color);background-color:var(--ds-auro-badge-container-color);border-color:var(--ds-auro-badge-border-color)}:host([advisory]){--ds-auro-badge-text-color: var(--ds-color-text-primary-default, #2a2a2a)}:host([onDark]){--ds-auro-badge-container-color: var(--ds-color-utility-navy-inverse, #acc9e2);--ds-auro-badge-border-color: var(--ds-color-utility-navy-inverse, #acc9e2);--ds-auro-badge-text-color: var(--ds-color-text-primary-default, #2a2a2a)}:host([target]){--ds-auro-badge-container-color: transparent}:host([label]){--ds-auro-badge-container-color: transparent;--ds-auro-badge-border-color: var(--ds-color-border-secondary-default, #939fad);--ds-auro-badge-text-color: var(--ds-color-text-secondary-default, #525252)}:host([label][ondark]){--ds-auro-badge-container-color: transparent;--ds-auro-badge-border-color: var(--ds-color-border-secondary-default, #939fad);--ds-auro-badge-text-color: var(--ds-color-text-primary-default, #2a2a2a)}:host([error]){--ds-auro-badge-container-color: var(--ds-color-utility-error-default, $default);--ds-auro-badge-border-color: var(--ds-color-utility-error-default, $default)}:host([error][ondark]){--ds-auro-badge-container-color: var(--ds-color-utility-error-inverse, $dark);--ds-auro-badge-border-color: var(--ds-color-utility-error-inverse, $dark)}:host([success]){--ds-auro-badge-container-color: var(--ds-color-utility-success-default, $default);--ds-auro-badge-border-color: var(--ds-color-utility-success-default, $default)}:host([success][ondark]){--ds-auro-badge-container-color: var(--ds-color-utility-success-inverse, $dark);--ds-auro-badge-border-color: var(--ds-color-utility-success-inverse, $dark)}:host([advisory]){--ds-auro-badge-container-color: var(--ds-color-utility-warning-default, $default);--ds-auro-badge-border-color: var(--ds-color-utility-warning-default, $default)}:host([advisory][ondark]){--ds-auro-badge-container-color: var(--ds-color-utility-warning-inverse, $dark);--ds-auro-badge-border-color: var(--ds-color-utility-warning-inverse, $dark)}:host([label][error]),:host([label][success]){--ds-auro-badge-text-color: var(--ds-color-text-primary-inverse, #ffffff)}:host([label][advisory]){--ds-auro-badge-text-color: var(--ds-color-text-primary-default, #2a2a2a)}:host([emerald]){--ds-auro-badge-container-color: var(--ds-color-tier-oneworld-emerald, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-oneworld-emerald, $fallback)}:host([sapphire]){--ds-auro-badge-container-color: var(--ds-color-tier-oneworld-sapphire, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-oneworld-sapphire, $fallback)}:host([ruby]){--ds-auro-badge-container-color: var(--ds-color-tier-oneworld-ruby, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-oneworld-ruby, $fallback)}:host([lounge]){--ds-auro-badge-container-color: var(--ds-color-tier-alaska-lounge, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-alaska-lounge, $fallback)}:host([loungeplus]){--ds-auro-badge-container-color: var(--ds-color-tier-alaska-loungeplus, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-alaska-loungeplus, $fallback)}:host([mvp]){--ds-auro-badge-container-color: var(--ds-color-tier-alaska-mvp-default, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-alaska-mvp-default, $fallback)}:host([mvpgold]){--ds-auro-badge-container-color: var(--ds-color-tier-alaska-mvpgold-default, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-alaska-mvpgold-default, $fallback)}:host([mvpgold75k]){--ds-auro-badge-container-color: var(--ds-color-tier-alaska-mvpgold75k-default, $fallback);--ds-auro-badge-border-color: var(--ds-color-tier-alaska-mvpgold75k-default, $fallback)}`;

var tokensCss = css`:host{--ds-auro-badge-border-color: var(--ds-color-border-subtle-inverse, #326aa5);--ds-auro-badge-boxshadow-color: var(--ds-color-border-subtle-default, #f0f7fd);--ds-auro-badge-container-color: var(--ds-color-utility-navy-default, #265688);--ds-auro-badge-text-color: var(--ds-color-text-primary-inverse, #ffffff)}`;

var buttonVersion = '8.1.0';

var iconVersion = '6.0.1';

// Copyright (c) 2020 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * HTML custom element for the use of drawing attention to additional interface information.
 *
 * @attr {Boolean} target - Enables the close functionality
 * @attr {Boolean} ondark - Enables styles for dark backgrounds
 * @attr {Boolean} error - Enables error UI
 * @attr {Boolean} success - Enables success UI
 * @attr {Boolean} advisory - Enables advisory UI
 * @attr {Boolean} space - Adds default spacing spec to badges
 * @attr {Boolean} pill - Enables pill UI option
 * @attr {Boolean} label - Enables label UI option
 * @attr {Boolean} disabled - If set to true button will become disabled and not allow for interactions
 * @attr {Boolean} emerald - Sets the background color of the badge to the oneworld emerald color
 * @attr {Boolean} sapphire - Sets the background color of the badge to the oneworld sapphire color
 * @attr {Boolean} ruby - Sets the background color of the badge to the oneworld ruby color
 * @attr {Boolean} lounge - Sets the background color of the badge to the oneworld lounge color
 * @attr {Boolean} loungeplus - Sets the background color of the badge to the oneworld loungeplus color
 * @attr {Boolean} mvp - Sets the background color of the badge to the oneworld mvp color
 * @attr {Boolean} mvpgold - Sets the background color of the badge to the oneworld mvpgold color
 * @attr {Boolean} mvpgold75k - Sets the background color of the badge to the oneworld mvpgold75k color
 */

// build the component class
class AuroBadge extends LitElement {
  constructor() {
    super();

    /**
     * @private
     */
    this.icon = false;

    const versioning = new AuroDependencyVersioning();

    /**
     * @private
     */
    this.buttonTag = versioning.generateTag('auro-button', buttonVersion, AuroButton);

    /**
     * @private
     */
    this.iconTag = versioning.generateTag('auro-icon', iconVersion, AuroIcon);

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();

    this.target = false;
    this.disabled = false;
  }

  // function to define props used within the scope of this component
  static get properties() {
    return {
      target: {
        type: Boolean,
        reflect: true
      },
      disabled: {
        type: Boolean,
        reflect: true
      },
      icon: {
        type: Boolean,
        reflect: true
      },

      /**
       * @private
       */
      value: {
        type: String
      },
    };
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-badge"] - The name of element that you want to register to.
   *
   * @example
   * AuroBadge.register("custom-badge") // this will register this element to <custom-badge/>
   *
   */
  static register(name = "auro-badge") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroBadge);
  }

  /**
   * Fires a custom event and removes the element from the DOM if target is true.
   * @private
   * @param {*} event - Event interaction event from Badge.
   */
  handleChange(event) {
    if (this.target) {
      const customEvent = new CustomEvent(event.type, event);

      this.dispatchEvent(customEvent);
      this.remove();
    }
  }

  /**
   * On slot content change, checks for auro-icon and applies attribute to component for adjusted styling.
   * @private
   * @returns {void}
   */
  handleContentSlotChanges() {
    const [slotContent] = this.shadowRoot.querySelector('slot').assignedNodes();

    if (slotContent.tagName === 'AURO-ICON') {
      this.icon = true;
    } else {
      this.icon = false;
    }
  }

  /**
   * Generates an HTML element containing an SVG icon based on the provided `svgContent`.
   *
   * @private
   * @param {string} svgContent - The SVG content to be embedded.
   * @returns {Element} The HTML element containing the SVG icon.
   */
  generateIconHtml(svgContent) {
    const dom = new DOMParser().parseFromString(svgContent, 'text/html');
    const svg = dom.body.firstChild;

    svg.setAttribute('slot', 'svg');

    const iconHtml = html`<${this.iconTag} customColor customSvg slot="icon">${svg}</${this.iconTag}>`;

    return iconHtml;
  }

  connectedCallback() {
    super.connectedCallback();
    this.runtimeUtils.handleComponentTagRename(this, 'auro-badge');
  }

  firstUpdated() {
    // Finds slotted content and adds string to button value
    if (this.target) {
      const [targetElement] = this.shadowRoot.querySelector('slot').assignedNodes();

      this.value = targetElement.textContent;
    }
  }

  static get styles() {
    return [
      styleCss,
      colorCss,
      tokensCss
    ];
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    return html`
      ${this.target
        ? html`
        <${this.buttonTag}
          rounded
          @click=${this.handleChange}
          ?disabled="${this.disabled}"
          ?onDark="${this.hasAttribute('ondark')}"
          .value="${this.value}"
          class="target"
          id="targetButton">
          <slot @slotchange="${this.handleContentSlotChanges}"></slot>
          ${this.generateIconHtml(closeIcon.svg)}
          <span class="util_displayHiddenVisually">Dismiss</span>
        </${this.buttonTag}>`
        : html`<slot @slotchange="${this.handleContentSlotChanges}"></slot>`
      }
    `;
  }
}

AuroBadge.register();

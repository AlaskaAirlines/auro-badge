// Copyright (c) 2020 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.

// ---------------------------------------------------------------------

// Import Auro tokens
@import "./../node_modules/@aurodesignsystem/design-tokens/dist/tokens/SCSSVariables";

@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/breakpoints";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/core";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/utilityClasses/displayProperties";

// Support for auroElement styles
// @import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/auroElement/auroElement";

// container styles - defines the look of the outer custom component
// :host {
//   ...
// }

// layout styles - define any layout specifications for UI that is contained WITHIN the component
// never define layout that would cause effect on element outside the scope of this component


// component shape styles
// .auro-badge {
//   ...
// }

// This pattern will ensure that the focus-visible state will be shown
// regardless of native support or using the polyfill.
:host(.focus-visible), :focus-visible {
  &.target, .target {
    box-shadow: inset 0 0 0 1px var(--ds-color-base-white, $ds-color-base-white), inset 0 0 0 3px var(--ds-color-background-lightest, $ds-color-background-lightest);

    &::-moz-focus-inner {
      border: none;
      width: 100%;
    }
  }
}

:host {
  line-height: 1;
  --labelpillpadding: .3125rem;
}

:host([space]) {
  margin-left: var(--ds-size-300, $ds-size-300);
}

:host,
.target {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
  color: var(--ds-color-text-primary-inverse, $ds-color-text-primary-inverse);
  background-color: var(--ds-color-ui-default-default, $ds-color-ui-default-default);
  border: 1px solid var(--ds-color-ui-default-default, $ds-color-ui-default-default);
  // suggestion token; establish a supported scale of values, e.g. 100 - 1000
  // also create --ds-border-radius-badge that maps to a scale value
  border-radius: 1.375rem;
  padding: .688rem var(--ds-size-200, $ds-size-200);
}

:host([advisory]) {
  color: var(--ds-color-text-primary-default, $ds-color-text-primary-default);

  .target {
    color: var(--ds-color-text-primary-default, $ds-color-text-primary-default);
  }
}

:host([onDark]) {
  background-color: var(--ds-color-brand-breeze-300, $ds-color-brand-breeze-300);
  border-color: var(--ds-color-brand-breeze-300, $ds-color-brand-breeze-300);
  color: var(--ds-color-text-primary-default, $ds-color-text-primary-default);

  @extend %hostTarget;
}

:host([target]) {
  padding: 0;
  border: 0;
}

:host([target][ondark][disabled]) {
  .target {
    color: var(--ds-color-text-primary-default, $ds-color-text-primary-default);
  }
}

:host([target][ondark]:not([disabled])) {
  .target {
    color: var(--ds-color-text-primary-default, $ds-color-text-primary-default);

    @media (hover: hover) {
      &:active,
      &:hover {
        cursor: pointer;
        background-color: var(--ds-color-brand-breeze-200, $ds-color-brand-breeze-200);
        border-color: var(--ds-color-brand-breeze-200, $ds-color-brand-breeze-200);
      }
    }
  }
}

:host([target]:not([disabled])) {
  .target {
    @media (hover: hover) {
      &:active,
      &:hover {
        cursor: pointer;
        background-color: var(--ds-color-ui-hover-default, $ds-color-ui-hover-default);
        border-color: var(--ds-color-ui-hover-default, $ds-color-ui-hover-default);
      }
    }
  }
}

.target {
  font: inherit;
  padding: .4375rem var(--ds-size-100, $ds-size-100) .4375rem var(--ds-size-200, $ds-size-200);

  // macOS / iOS agents
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
}

svg {
  margin-left: var(--ds-size-100, $ds-size-100);
}



:host([label]) {
  background-color: transparent;
  border-color: var(--ds-color-brand-neutral-500, $ds-color-brand-neutral-500);
  color: var(--ds-color-text-secondary-default, $ds-color-text-secondary-default);
  font-size: var(--ds-text-body-size-xs, $ds-text-body-size-xs);
  padding: var(--labelpillpadding) var(--ds-size-150, $ds-size-150);
  user-select: none;
  border-radius: 9999px;
}

:host([label][ondark]) {
  background-color: transparent;
  border-color: var(--ds-color-brand-neutral-500, $ds-color-brand-neutral-500);
  color: var(--ds-color-text-primary-inverse, $ds-color-text-primary-inverse);
}

:host([pill]) {
  padding: var(--labelpillpadding) var(--ds-size-150, $ds-size-150);
  user-select: none;
  border-radius: 9999px;
}

:host([disabled]) {
  opacity: 0.4;
}

%hostTarget {
  .target {
    background-color: transparent;
    border-color: transparent;
  }
}

// The following loop supports the defined state of a badge, as well
// as the default fallback Sass variable color and then the OnDark
// Sass variable color using Sass destructuring
// https://sass-lang.com/documentation/at-rules/control/each/#destructuring
$states:
  "error" $ds-color-alert-error-default $ds-color-state-error-100,
  "success" $ds-color-alert-success-default $ds-color-state-success-100,
  "advisory" $ds-color-alert-advisory-default $ds-color-alert-advisory-default;

@each $state, $default, $dark in $states {
  :host([#{$state}]) {
    background-color: var(--ds-color-alert-#{$state}-default, $default);
    border-color: var(--ds-color-alert-#{$state}-default, $default);

    @extend %hostTarget;
  }

  :host([#{$state}][ondark]) {
    background-color: var(--ds-color-state-#{$state}-100, $dark);
    border-color: var(--ds-color-state-#{$state}-100, $dark);

    @extend %hostTarget;
  }

  :host([#{$state}]:not([disabled])) {
    .target {
      @media (hover: hover) {
        &:active,
        &:hover {
          cursor: pointer;
          background-color: var(--ds-color-alert-#{$state}-default, $default);
          border-color: var(--ds-color-alert-#{$state}-default, $default);
          filter: brightness(85%);
        }
      }
    }
  }

  :host([#{$state}][ondark]:not([disabled])) {
    .target {
      @media (hover: hover) {
        &:active,
        &:hover {
          cursor: pointer;
          background-color: var(--ds-color-state-#{$state}-100, $dark);
          border-color: var(--ds-color-state-#{$state}-100, $dark);
          filter: brightness(85%);
        }
      }
    }
  }
}

:host([label][error]),
:host([label][success]) {
  color: var(--ds-color-base-white, $ds-color-base-white);
}

:host([label][advisory]) {
  color: var(--ds-color-text-primary-default, $ds-color-text-primary-default);
}

// Sass destructuring loop
$owstatus:
  "emerald" $ds-color-tier-oneworld-emerald,
  "sapphire" $ds-color-tier-oneworld-sapphire,
  "ruby" $ds-color-tier-oneworld-ruby;

@each $status, $fallback in $owstatus {
  :host([#{$status}]) {
    background-color: var(--ds-color-tier-oneworld-#{$status}, $fallback);
    border-color:  var(--ds-color-tier-oneworld-#{$status}, $fallback);

    @extend %hostTarget;
  }

  :host([#{$status}]:not([disabled])) {
    .target {
      @media (hover: hover) {
        &:active,
        &:hover {
          cursor: pointer;
          background-color: var(--ds-color-tier-oneworld-#{$status}, $fallback);
          border-color: var(--ds-color-tier-oneworld-#{$status}, $fallback);
          filter: brightness(85%);
        }
      }
    }
  }
}


:host([icon]) {
  padding: var(--labelpillpadding) var(--ds-size-200, $ds-size-200);
}

:host([icon]) ::slotted(auro-icon) {
  width: var(--ds-size-300, $ds-size-300);
  margin-right: var(--ds-size-50, $ds-size-50);
}

:host([icon][pill]) ::slotted(auro-icon) {
  width: var(--ds-size-200, $ds-size-200);
}

:host([icon][pill]) {
  padding: var(--ds-size-50, $ds-size-50) var(--ds-size-150, $ds-size-150);
  line-height: 0.75rem;
}

:host([icon]) {
  padding: var(--labelpillpadding) var(--ds-size-200, $ds-size-200);
}

:host([icon]) ::slotted(auro-icon) {
  width: var(--ds-size-300, $ds-size-300);
  margin-right: var(--ds-size-50, $ds-size-50);
}

:host([icon][pill]) ::slotted(auro-icon) {
  width: var(--ds-size-200, $ds-size-200);
}

:host([icon][pill]) {
  padding: var(--ds-size-50, $ds-size-50) var(--ds-size-150, $ds-size-150);
  line-height: 0.75rem;
}
